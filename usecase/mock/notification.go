// Code generated by MockGen. DO NOT EDIT.
// Source: meli/notifications/usecase (interfaces: NotificationUseCase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	dto "meli/notifications/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationUseCase is a mock of NotificationUseCase interface.
type MockNotificationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationUseCaseMockRecorder
}

// MockNotificationUseCaseMockRecorder is the mock recorder for MockNotificationUseCase.
type MockNotificationUseCaseMockRecorder struct {
	mock *MockNotificationUseCase
}

// NewMockNotificationUseCase creates a new mock instance.
func NewMockNotificationUseCase(ctrl *gomock.Controller) *MockNotificationUseCase {
	mock := &MockNotificationUseCase{ctrl: ctrl}
	mock.recorder = &MockNotificationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationUseCase) EXPECT() *MockNotificationUseCaseMockRecorder {
	return m.recorder
}

// SendNotification mocks base method.
func (m *MockNotificationUseCase) SendNotification(arg0 *dto.NotifyDTO, arg1 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockNotificationUseCaseMockRecorder) SendNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockNotificationUseCase)(nil).SendNotification), arg0, arg1)
}
