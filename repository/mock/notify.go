// Code generated by MockGen. DO NOT EDIT.
// Source: meli/notifications/repository (interfaces: NotifyRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	dto "meli/notifications/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotifyRepository is a mock of NotifyRepository interface.
type MockNotifyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyRepositoryMockRecorder
}

// MockNotifyRepositoryMockRecorder is the mock recorder for MockNotifyRepository.
type MockNotifyRepositoryMockRecorder struct {
	mock *MockNotifyRepository
}

// NewMockNotifyRepository creates a new mock instance.
func NewMockNotifyRepository(ctrl *gomock.Controller) *MockNotifyRepository {
	mock := &MockNotifyRepository{ctrl: ctrl}
	mock.recorder = &MockNotifyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyRepository) EXPECT() *MockNotifyRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockNotifyRepository) Save(arg0 *dto.NotifyDTO, arg1 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockNotifyRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockNotifyRepository)(nil).Save), arg0, arg1)
}
