// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucaswiix/meli/notifications/service (interfaces: NotifyService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	dto "github.com/lucaswiix/meli/notifications/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotifyService is a mock of NotifyService interface.
type MockNotifyService struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyServiceMockRecorder
}

// MockNotifyServiceMockRecorder is the mock recorder for MockNotifyService.
type MockNotifyServiceMockRecorder struct {
	mock *MockNotifyService
}

// NewMockNotifyService creates a new mock instance.
func NewMockNotifyService(ctrl *gomock.Controller) *MockNotifyService {
	mock := &MockNotifyService{ctrl: ctrl}
	mock.recorder = &MockNotifyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyService) EXPECT() *MockNotifyServiceMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockNotifyService) Save(arg0 *dto.NotifyDTO, arg1 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockNotifyServiceMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockNotifyService)(nil).Save), arg0, arg1)
}
