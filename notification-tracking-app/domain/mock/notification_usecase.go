// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucaswiix/notifications-tracking-app/domain (interfaces: NotificationUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/lucaswiix/notifications-tracking-app/domain"
)

// MockNotificationUsecase is a mock of NotificationUsecase interface.
type MockNotificationUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationUsecaseMockRecorder
}

// MockNotificationUsecaseMockRecorder is the mock recorder for MockNotificationUsecase.
type MockNotificationUsecaseMockRecorder struct {
	mock *MockNotificationUsecase
}

// NewMockNotificationUsecase creates a new mock instance.
func NewMockNotificationUsecase(ctrl *gomock.Controller) *MockNotificationUsecase {
	mock := &MockNotificationUsecase{ctrl: ctrl}
	mock.recorder = &MockNotificationUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationUsecase) EXPECT() *MockNotificationUsecaseMockRecorder {
	return m.recorder
}

// TrackByUserID mocks base method.
func (m *MockNotificationUsecase) TrackByUserID(arg0 context.Context, arg1, arg2 string) (*domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackByUserID indicates an expected call of TrackByUserID.
func (mr *MockNotificationUsecaseMockRecorder) TrackByUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackByUserID", reflect.TypeOf((*MockNotificationUsecase)(nil).TrackByUserID), arg0, arg1, arg2)
}
