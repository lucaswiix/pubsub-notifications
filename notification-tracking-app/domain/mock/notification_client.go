// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucaswiix/notifications-tracking-app/domain (interfaces: NotificationClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationClient is a mock of NotificationClient interface.
type MockNotificationClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationClientMockRecorder
}

// MockNotificationClientMockRecorder is the mock recorder for MockNotificationClient.
type MockNotificationClientMockRecorder struct {
	mock *MockNotificationClient
}

// NewMockNotificationClient creates a new mock instance.
func NewMockNotificationClient(ctrl *gomock.Controller) *MockNotificationClient {
	mock := &MockNotificationClient{ctrl: ctrl}
	mock.recorder = &MockNotificationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationClient) EXPECT() *MockNotificationClientMockRecorder {
	return m.recorder
}

// ConsumeByUserID mocks base method.
func (m *MockNotificationClient) ConsumeByUserID(arg0 context.Context, arg1, arg2 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeByUserID indicates an expected call of ConsumeByUserID.
func (mr *MockNotificationClientMockRecorder) ConsumeByUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeByUserID", reflect.TypeOf((*MockNotificationClient)(nil).ConsumeByUserID), arg0, arg1, arg2)
}
